---
- hosts: backend
  become: yes
  tasks:
    - name: Wait for backend container to start
      wait_for:
        port: 3000
        host: localhost
        timeout: 60
        delay: 10

    - name: Check backend container status
      docker_container_info:
        name: mini-social-server
      register: backend_container

    - name: Verify backend container is running
      fail:
        msg: "Backend container is not running"
      when: backend_container.container.State.Status != "running"

    - name: Check backend health endpoint
      uri:
        url: http://localhost:3000/health
        method: GET
        timeout: 10
      register: backend_health
      retries: 3
      delay: 5
      ignore_errors: yes

    - name: Check backend API endpoint (fallback)
      uri:
        url: http://localhost:3000/api
        method: GET
        timeout: 10
      register: backend_api
      retries: 3
      delay: 5
      when: backend_health.failed is defined and backend_health.failed

    - name: Verify backend is responding
      fail:
        msg: "Backend is not responding to health checks"
      when:
        - (backend_health.failed is defined and backend_health.failed)
        - (backend_api.failed is defined and backend_api.failed)

- hosts: frontend
  become: yes
  tasks:
    - name: Wait for frontend container to start
      wait_for:
        port: 3000
        host: localhost
        timeout: 60
        delay: 10

    - name: Check frontend container status
      docker_container_info:
        name: mini-social-client
      register: frontend_container

    - name: Verify frontend container is running
      fail:
        msg: "Frontend container is not running"
      when: frontend_container.container.State.Status != "running"

    - name: Check Caddy service status
      service_facts:
      register: services

    - name: Verify Caddy is running
      fail:
        msg: "Caddy service is not running"
      when: services.ansible_facts.services['caddy.service'].state != "running"

    - name: Check frontend through Caddy (HTTP)
      uri:
        url: http://localhost
        method: GET
        timeout: 10
        follow_redirects: none
      register: frontend_http
      retries: 3
      delay: 5
      ignore_errors: yes

    - name: Check frontend directly on port 3000
      uri:
        url: http://localhost:3000
        method: GET
        timeout: 10
      register: frontend_direct
      retries: 3
      delay: 5
      when: frontend_http.failed is defined and frontend_http.failed

    - name: Verify frontend is accessible
      fail:
        msg: "Frontend is not accessible"
      when:
        - (frontend_http.failed is defined and frontend_http.failed)
        - (frontend_direct.failed is defined and frontend_direct.failed)

    - name: Test HTTPS redirect (if applicable)
      uri:
        url: https://pubment.xyz
        method: GET
        timeout: 15
        validate_certs: no
      register: https_check
      retries: 2
      delay: 10
      ignore_errors: yes

    - name: Report HTTPS status
      debug:
        msg: "HTTPS check: {{ 'PASSED' if https_check.status == 200 else 'FAILED - ' + (https_check.msg | default('Unknown error')) }}"
